{"version":3,"sources":["../src/cache-handler/cacheHandler.ts","../src/cache-handler/rollout.ts","../src/cache-handler/kv.ts"],"sourcesContent":["import FileSystemCache from 'next/dist/server/lib/incremental-cache/file-system-cache'\nimport type IncrementalCache from 'next/dist/server/lib/incremental-cache/file-system-cache'\nimport type {\n  CacheHandler as NextCacheHandler,\n  CacheHandlerValue as NextCacheHandlerValue\n} from 'next/dist/server/lib/incremental-cache'\nimport { isKVStoreActive } from './rollout'\nimport { KV, KVNotFoundError } from './kv'\n\ntype FileSystemCacheContext = ConstructorParameters<typeof IncrementalCache>[0]\ntype AtlasCacheHandlerValue = Omit<NextCacheHandlerValue, 'value'> & {\n  value: any\n}\n\nexport default class CacheHandler {\n  readonly keyPrefix = '.atlas'\n  readonly kvStore: KV\n  public filesystemCache: FileSystemCache\n  private readonly skipKVStore: boolean\n  private readonly kvStoreRolloutPercent: number\n  private readonly debug: boolean\n\n  constructor(ctx: FileSystemCacheContext) {\n    // Initialise the default Next.js Filesystem Cache Handler so we can fall\n    // back to using it to read from disk if the remote cache is unavailable\n    this.filesystemCache = new FileSystemCache(ctx)\n\n    this.kvStore = new KV()\n\n    this.debug =\n      String(process.env.ATLAS_CACHE_HANDLER_DEBUG).toLowerCase() === 'true'\n\n    this.skipKVStore =\n      String(process.env.ATLAS_METADATA_BUILD).toLowerCase() === 'true'\n\n    // Generate the rollout percent from the env var, or default to 100%\n    const percentEnv = process.env.ATLAS_CACHE_HANDLER_ROLLOUT_PERCENT ?? ''\n    const percentEnvNum = parseInt(percentEnv, 10)\n    this.kvStoreRolloutPercent = isNaN(percentEnvNum) ? 100 : percentEnvNum\n  }\n\n  async get(...args: Parameters<NextCacheHandler['get']>): Promise<any> {\n    const [key, ctx = {}] = args\n\n    if (!this.kvStoreActive(key)) {\n      this.debugLog(`GET ${key} (skip remote store)`)\n      return await this.filesystemCache.get(key, ctx)\n    }\n\n    const remoteKey = this.generateKey(key, this.keyPrefix)\n    this.debugLog(`GET ${key} ${remoteKey}`)\n\n    try {\n      const data: AtlasCacheHandlerValue | null =\n        await this.kvStore.get(remoteKey)\n      return data\n    } catch (error) {\n      const is404: boolean = error instanceof KVNotFoundError\n      if (!is404) {\n        console.error(this.getErrorMessage(error))\n      }\n\n      try {\n        const fsData = await this.filesystemCache.get(key, ctx)\n\n        // Value was missing from the remote cache, write the local value to remote\n        if (is404 && fsData?.value != null) {\n          this.debugLog(`priming remote cache with ${key}`)\n          await this.set(key, fsData.value, {})\n        }\n\n        return fsData\n      } catch (err) {\n        console.error(this.getErrorMessage(err))\n        return null\n      }\n    }\n  }\n\n  async set(...args: Parameters<NextCacheHandler['set']>): Promise<void> {\n    const [key, data] = args\n\n    if (!this.kvStoreActive(key)) {\n      this.debugLog(`SET ${key} (skip remote store)`)\n      await this.filesystemCache.set(...args)\n      return\n    }\n\n    if (data === null) {\n      this.debugLog(`SET ${key} (skip remote store, data is null)`)\n      return\n    }\n\n    const cacheEntry: NextCacheHandlerValue = {\n      lastModified: Date.now(),\n      value: data\n    }\n\n    const remoteKey = this.generateKey(key, this.keyPrefix)\n    this.debugLog(`SET ${key} ${remoteKey}`)\n\n    try {\n      await this.kvStore.set(remoteKey, cacheEntry)\n    } catch (error) {\n      console.error(this.getErrorMessage(error))\n    }\n\n    await this.filesystemCache.set(...args)\n  }\n\n  async revalidateTag(\n    ...args: Parameters<NextCacheHandler['revalidateTag']>\n  ): Promise<void> {\n    await this.filesystemCache.revalidateTag(...args)\n  }\n\n  private generateKey(key: string, prefix?: string): string {\n    key = key.replace(/^\\/+/g, '') // strip leading slash\n    const buildID = process.env.ATLAS_METADATA_BUILD_ID ?? 'no-build-id'\n    return `${prefix}/${buildID}/next/${key}`\n  }\n\n  private getErrorMessage(error: unknown): string {\n    if (error instanceof Error) return error.message\n    return String(error)\n  }\n\n  private debugLog(msg: string): void {\n    if (this.debug) {\n      console.debug('DEBUG: Cache Handler: ' + msg)\n    }\n  }\n\n  /**\n   * Should the KV Store be used for this key?\n   */\n  private kvStoreActive(key: string): boolean {\n    if (this.skipKVStore) {\n      return false\n    }\n\n    if (this.kvStoreRolloutPercent >= 100) {\n      return true\n    }\n\n    if (this.kvStoreRolloutPercent <= 0) {\n      return false\n    }\n\n    return isKVStoreActive(key, this.kvStoreRolloutPercent)\n  }\n}\n","import crypto from 'crypto'\n\n// **\n// * isKVStoreActive Determines if a feature is active for a particular key and rollout percent\nexport function isKVStoreActive(key: string, rolloutPercent: number): boolean {\n  const hash = crypto.createHash('sha256')\n  hash.update(key)\n  const buf = hash.digest()\n\n  // Take the first four bytes of the hash and convert them to an int\n  const hashInt = buf.readUIntBE(0, 4)\n\n  // Get the remainder of the int value from 100 to downsample it to a percent\n  // then check if it's less than the current rolloutPercent\n  return rolloutPercent > (hashInt % 100) + 1\n}\n","import fetch, { type Response } from 'node-fetch'\nimport https from 'https'\n\nexport class KVError extends Error {\n  public response\n\n  constructor(response: Response, key: string) {\n    super(\n      `HTTP Error Response: ${response.status} ${response.statusText} for key: ${key}`\n    )\n    this.response = response\n  }\n}\n\nexport class KVNotFoundError extends Error {}\n\nexport class KV {\n  readonly kvStoreURL: string\n  private readonly selfSignedAgent: https.Agent\n  private readonly kvStoreToken: string\n\n  constructor() {\n    this.kvStoreURL = process.env.ATLAS_CACHE_URL ?? ''\n    if (this.kvStoreURL === '') {\n      console.warn('Cache Handler: could not connect to remote cache')\n    }\n\n    this.selfSignedAgent = new https.Agent({\n      rejectUnauthorized: false\n    })\n\n    this.kvStoreToken = process.env.ATLAS_KV_STORE_TOKEN ?? ''\n    if (this.kvStoreToken === '') {\n      console.warn('Cache Handler: could not connect to remote cache')\n    }\n  }\n\n  async get(key: string): Promise<any> {\n    const response = await fetch(`${this.kvStoreURL}/${key}`, {\n      agent: this.selfSignedAgent,\n      headers: {\n        Authorization: `Bearer ${this.kvStoreToken}`\n      }\n    })\n\n    this.#throwResponseErrors(response, key)\n\n    return await response.json()\n  }\n\n  async set(key: string, data: any): Promise<void> {\n    if (data === null) {\n      return\n    }\n\n    const response = await fetch(`${this.kvStoreURL}/${key}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.kvStoreToken}`\n      },\n      agent: this.selfSignedAgent\n    })\n\n    this.#throwResponseErrors(response, key)\n  }\n\n  /**\n   * Convert response status codes to KV errors and throw them\n   * @param response\n   * @param key\n   */\n  #throwResponseErrors(response: Response, key: string): void {\n    if (response.status === 404) {\n      throw new KVNotFoundError()\n    }\n    if (response.status < 200 || response.status >= 300) {\n      throw new KVError(response, key)\n    }\n  }\n}\n"],"mappings":"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","names":["crypto","https","fetch","FileSystemCache"]}