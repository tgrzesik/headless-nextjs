{"version":3,"sources":["../src/cache-handler/cacheHandler.ts","../src/cache-handler/rollout.ts","../src/cache-handler/kv.ts","../src/cache-handler/index.ts"],"sourcesContent":["import FileSystemCache from 'next/dist/server/lib/incremental-cache/file-system-cache'\nimport type IncrementalCache from 'next/dist/server/lib/incremental-cache/file-system-cache'\nimport type {\n  CacheHandler as NextCacheHandler,\n  CacheHandlerValue as NextCacheHandlerValue\n} from 'next/dist/server/lib/incremental-cache'\nimport { rolloutKVStoreForKey } from './rollout'\nimport { KV, KVNotFoundError } from './kv'\n\ntype FileSystemCacheContext = ConstructorParameters<typeof IncrementalCache>[0]\ntype AtlasCacheHandlerValue = Omit<NextCacheHandlerValue, 'value'> & {\n  value: any\n}\n\nexport class CacheHandler {\n  private readonly debug: boolean\n  private readonly filesystemCache: FileSystemCache\n  private readonly keyPrefix = '.atlas'\n  private readonly kvStore?: KV\n  private readonly kvStoreRolloutPercent: number\n  private readonly isBuild: boolean\n  private readonly buildID: string\n\n  constructor(ctx: FileSystemCacheContext) {\n    // Initialise the default Next.js Filesystem Cache Handler so we can fall\n    // back to using it to read from disk if the remote cache is unavailable\n    this.filesystemCache = new FileSystemCache(ctx)\n\n    this.debug = true\n\n    // Are we in the Atlas build environment?\n    this.isBuild =\n      String(process.env.ATLAS_METADATA_BUILD).toLowerCase() === 'true'\n\n    this.buildID = process.env.ATLAS_METADATA_BUILD_ID ?? 'no-build-id'\n\n    if (!this.isBuild) {\n      this.kvStore = new KV()\n      this.debugLog('KV store enabled')\n    }\n\n    // Generate the rollout percent from the env var, or default to 100%\n    const defaultPercent = 100\n    const percentEnv = process.env.ATLAS_CACHE_HANDLER_ROLLOUT_PERCENT ?? ''\n    const percentEnvNum = parseInt(percentEnv, 10)\n    this.kvStoreRolloutPercent = isNaN(percentEnvNum)\n      ? defaultPercent\n      : percentEnvNum\n  }\n\n  async get(...args: Parameters<NextCacheHandler['get']>): Promise<any> {\n    const [key, ctx = {}] = args\n\n    if (!this.useKVStore(key)) {\n      this.debugLog(`GET ${key} (skip remote store)`)\n      return await this.filesystemCache.get(key, ctx)\n    }\n\n    const remoteKey = this.generateKey(key)\n    this.debugLog(`GET ${key} ${remoteKey}`)\n\n    try {\n      const data: AtlasCacheHandlerValue | null =\n        await this.kvStore?.get(remoteKey)\n      return data\n    } catch (error) {\n      const is404: boolean = error instanceof KVNotFoundError\n      if (!is404) {\n        console.error(this.getErrorMessage(error))\n      }\n\n      try {\n        const fsData = await this.filesystemCache.get(key, ctx)\n\n        // Value was missing from the remote cache, write the local value to remote\n        if (is404 && fsData?.value != null) {\n          this.debugLog(`priming remote cache with ${key}`)\n          await this.set(key, fsData.value, {})\n        }\n\n        return fsData\n      } catch (err) {\n        console.error(this.getErrorMessage(err))\n        return null\n      }\n    }\n  }\n\n  async set(...args: Parameters<NextCacheHandler['set']>): Promise<void> {\n    const [key, data] = args\n\n    if (!this.useKVStore(key)) {\n      this.debugLog(`SET ${key} (skip remote store)`)\n      await this.filesystemCache.set(...args)\n      return\n    }\n\n    if (data === null) {\n      this.debugLog(`SET ${key} (skip remote store, data is null)`)\n      return\n    }\n\n    const cacheEntry: NextCacheHandlerValue = {\n      lastModified: Date.now(),\n      value: data\n    }\n\n    const remoteKey = this.generateKey(key)\n    this.debugLog(`SET ${key} ${remoteKey}`)\n\n    try {\n      await this.kvStore?.set(remoteKey, cacheEntry)\n    } catch (error) {\n      console.error(this.getErrorMessage(error))\n    }\n\n    await this.filesystemCache.set(...args)\n  }\n\n  async revalidateTag(\n    ...args: Parameters<NextCacheHandler['revalidateTag']>\n  ): Promise<void> {\n    await this.filesystemCache.revalidateTag(...args)\n  }\n\n  private generateKey(key: string): string {\n    key = key.replace(/^\\/+/g, '') // strip leading slash\n    return `${this.keyPrefix}/${this.buildID}/next/${key}`\n  }\n\n  private getErrorMessage(error: unknown): string {\n    if (error instanceof Error) return error.message\n    return String(error)\n  }\n\n  private debugLog(msg: string): void {\n    if (this.debug) {\n      console.debug('DEBUG: Cache Handler: ' + msg)\n    }\n  }\n\n  /**\n   * Should the KV Store be used for this key?\n   */\n  private useKVStore(key: string): boolean {\n    if (this.kvStore == null) {\n      return false\n    }\n\n    if (this.isBuild) {\n      return false\n    }\n\n    if (this.kvStoreRolloutPercent >= 100) {\n      return true\n    }\n\n    if (this.kvStoreRolloutPercent <= 0) {\n      return false\n    }\n\n    return rolloutKVStoreForKey(key, this.kvStoreRolloutPercent)\n  }\n}\n","import crypto from 'crypto'\n\n// **\n// * rolloutKVStoreForKey Determines if the KV store is active for a particular key and rollout percent\nexport function rolloutKVStoreForKey(\n  key: string,\n  rolloutPercent: number\n): boolean {\n  const hash = crypto.createHash('sha256')\n  hash.update(key)\n  const buf = hash.digest()\n\n  // Take the first four bytes of the hash and convert them to an int\n  const hashInt = buf.readUIntBE(0, 4)\n\n  // Get the remainder of the int value from 100 to downsample it to a percent\n  // then check if it's less than the current rolloutPercent\n  return rolloutPercent > (hashInt % 100) + 1\n}\n","import fetch, { type Response } from 'node-fetch'\nimport https from 'https'\n\nexport class KVError extends Error {\n  public response\n\n  constructor(response: Response, key: string) {\n    super(\n      `HTTP Error Response: ${response.status} ${response.statusText} for key: ${key}`\n    )\n    this.response = response\n  }\n}\n\nexport class KVNotFoundError extends Error {}\n\nexport class KV {\n  private readonly token: string\n  private readonly url: string\n  private readonly selfSignedAgent: https.Agent\n\n  // The atlas-next package version will be injected from package.json\n  // at build time by esbuild-plugin-version-injector\n  private readonly version: string = '1.0.0-alpha.0'\n\n  constructor() {\n    this.url = process.env.ATLAS_KV_STORE_URL_TEST ?? ''\n    if (this.url === '') {\n      throw new Error('KV: ATLAS_KV_STORE_URL_TEST env var is missing')\n    }\n\n    this.token = process.env.ATLAS_KV_STORE_TOKEN_TEST ?? ''\n    if (this.token === '') {\n      throw new Error('KV: ATLAS_KV_STORE_TOKEN_TEST env var is missing')\n    }\n\n    this.selfSignedAgent = new https.Agent({\n      rejectUnauthorized: false\n    })\n  }\n\n  async get(key: string): Promise<any> {\n    const response = await fetch(`${this.url}/${key}`, {\n      agent: this.selfSignedAgent,\n      headers: {\n        Authorization: `Bearer ${this.token}`,\n        'User-Agent': `AtlasNext/${this.version}`\n      }\n    })\n\n    this.throwResponseErrors(response, key)\n\n    return await response.json()\n  }\n\n  async set(key: string, data: any): Promise<void> {\n    if (data === null) {\n      return\n    }\n\n    const response = await fetch(`${this.url}/${key}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.token}`,\n        'User-Agent': `AtlasNext/${this.version}`\n      },\n      agent: this.selfSignedAgent\n    })\n\n    this.throwResponseErrors(response, key)\n  }\n\n  /**\n   * Convert response status codes to KV errors and throw them\n   * @param response\n   * @param key\n   */\n  private throwResponseErrors(response: Response, key: string): void {\n    if (response.status === 404) {\n      throw new KVNotFoundError()\n    }\n    if (response.status < 200 || response.status >= 300) {\n      throw new KVError(response, key)\n    }\n  }\n}\n","import { CacheHandler } from './cacheHandler'\n\nexport default CacheHandler\n"],"mappings":"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","names":[]}