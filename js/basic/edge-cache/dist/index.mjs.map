{"version":3,"sources":["../src/edgeCache.ts"],"sourcesContent":["// The edge-cache package version will be injected from package.json\n// at build time by esbuild-plugin-version-injector\nconst version: string = '1.2.0'\n\nexport class RateLimitError extends Error {}\n\n/**\n * Purge the given paths from the edge cache\n * @param paths\n * @returns\n */\nexport async function purgePaths(paths: string[]): Promise<any> {\n  const debug: boolean =\n    String(process.env.ATLAS_EDGE_CACHE_DEBUG).toLowerCase() === 'true' ||\n    String(process.env.HEADLESS_EDGE_CACHE_DEBUG).toLowerCase() === 'true'\n\n  try {\n    await purge(paths)\n  } catch (error: any) {\n    console.error(error.message)\n    throw error\n  }\n\n  if (debug) {\n    console.debug(\n      `EdgeCache: DEBUG: Purged cache for paths: ${paths.join(',')}`\n    )\n  }\n}\n\n/**\n * Purge the given tags from edge cache\n * @param tags\n * @returns\n */\nexport async function purgeTags(tags: string[]): Promise<any> {\n  const debug: boolean =\n    String(process.env.ATLAS_EDGE_CACHE_DEBUG).toLowerCase() === 'true' ||\n    String(process.env.HEADLESS_EDGE_CACHE_DEBUG).toLowerCase() === 'true'\n\n  try {\n    await purge(tags)\n  } catch (error: any) {\n    console.error(error.message)\n    throw error\n  }\n\n  if (debug) {\n    console.debug(`EdgeCache: DEBUG: Purged cache for tags: ${tags.join(',')}`)\n  }\n}\n\nasync function purge(paths: string[]): Promise<any> {\n  const url: string = process.env.HEADLESS_APPS_API_URL_ADDRESS ?? ''\n  const token: string = process.env.HEADLESS_APPS_API_TOKEN ?? ''\n  const runtime: boolean =\n    String(process.env.HEADLESS_METADATA).toLowerCase() === 'true'\n  const envuuid: string = process.env.HEADLESS_METADATA_ENV_ID ?? ''\n  const isOnPlatform = url.length > 0 && token.length > 0 && runtime\n\n  if (!isOnPlatform) {\n    console.log('EdgeCache: Skipping cache purge in local environment')\n    return\n  }\n\n  if (envuuid.length === 0) {\n    throw new Error('EdgeCache: HEADLESS_METADATA_ENV_ID env var is missing')\n  }\n\n  const response = await fetch(`${url}/envs/${envuuid}/edge/cache/tags:purge`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`,\n      'User-Agent': `AtlasNext/${version}`\n    },\n    body: JSON.stringify({ tags: paths })\n  })\n\n  if (response.status === 429) {\n    throw new RateLimitError(\n      'EdgeCache: Rate limit exceeded (429), please try again later'\n    )\n  }\n\n  if (response.status < 200 || response.status >= 300) {\n    throw new Error(\n      `EdgeCache: HTTP Error Response: ${response.status} ${response.statusText} for: ${paths.join(',')}`\n    )\n  }\n}\n"],"mappings":";AAEA,IAAM,UAAkB;AAEjB,IAAM,iBAAN,cAA6B,MAAM;AAAC;AAO3C,eAAsB,WAAW,OAA+B;AAC9D,QAAM,QACJ,OAAO,QAAQ,IAAI,sBAAsB,EAAE,YAAY,MAAM,UAC7D,OAAO,QAAQ,IAAI,yBAAyB,EAAE,YAAY,MAAM;AAElE,MAAI;AACF,UAAM,MAAM,KAAK;AAAA,EACnB,SAAS,OAAY;AACnB,YAAQ,MAAM,MAAM,OAAO;AAC3B,UAAM;AAAA,EACR;AAEA,MAAI,OAAO;AACT,YAAQ;AAAA,MACN,6CAA6C,MAAM,KAAK,GAAG,CAAC;AAAA,IAC9D;AAAA,EACF;AACF;AAOA,eAAsB,UAAU,MAA8B;AAC5D,QAAM,QACJ,OAAO,QAAQ,IAAI,sBAAsB,EAAE,YAAY,MAAM,UAC7D,OAAO,QAAQ,IAAI,yBAAyB,EAAE,YAAY,MAAM;AAElE,MAAI;AACF,UAAM,MAAM,IAAI;AAAA,EAClB,SAAS,OAAY;AACnB,YAAQ,MAAM,MAAM,OAAO;AAC3B,UAAM;AAAA,EACR;AAEA,MAAI,OAAO;AACT,YAAQ,MAAM,4CAA4C,KAAK,KAAK,GAAG,CAAC,EAAE;AAAA,EAC5E;AACF;AAEA,eAAe,MAAM,OAA+B;AAClD,QAAM,MAAc,QAAQ,IAAI,iCAAiC;AACjE,QAAM,QAAgB,QAAQ,IAAI,2BAA2B;AAC7D,QAAM,UACJ,OAAO,QAAQ,IAAI,iBAAiB,EAAE,YAAY,MAAM;AAC1D,QAAM,UAAkB,QAAQ,IAAI,4BAA4B;AAChE,QAAM,eAAe,IAAI,SAAS,KAAK,MAAM,SAAS,KAAK;AAE3D,MAAI,CAAC,cAAc;AACjB,YAAQ,IAAI,sDAAsD;AAClE;AAAA,EACF;AAEA,MAAI,QAAQ,WAAW,GAAG;AACxB,UAAM,IAAI,MAAM,wDAAwD;AAAA,EAC1E;AAEA,QAAM,WAAW,MAAM,MAAM,GAAG,GAAG,SAAS,OAAO,0BAA0B;AAAA,IAC3E,QAAQ;AAAA,IACR,SAAS;AAAA,MACP,gBAAgB;AAAA,MAChB,eAAe,UAAU,KAAK;AAAA,MAC9B,cAAc,aAAa,OAAO;AAAA,IACpC;AAAA,IACA,MAAM,KAAK,UAAU,EAAE,MAAM,MAAM,CAAC;AAAA,EACtC,CAAC;AAED,MAAI,SAAS,WAAW,KAAK;AAC3B,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAEA,MAAI,SAAS,SAAS,OAAO,SAAS,UAAU,KAAK;AACnD,UAAM,IAAI;AAAA,MACR,mCAAmC,SAAS,MAAM,IAAI,SAAS,UAAU,SAAS,MAAM,KAAK,GAAG,CAAC;AAAA,IACnG;AAAA,EACF;AACF;","names":[]}